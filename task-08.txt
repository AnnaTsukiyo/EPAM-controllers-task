-------------------------------------------------------

Замечание.

Формулировка бизнес области поставлена каждому индивидуально.

-------------------------------------------------------

Пакет: com.epam.rd.java.basic.taskN
где N - номер задания

Классы:

Demo - демонстрирует работу приложения.
Main - содержит требуемую по условию функциональность.

Файлы:

input.xml - входной XML-документ.
input.xsd - входной XSD-документ.

output.dom.xml - результат работы DOM-анализатора.
output.sax.xml - результат работы SAX-парсера.
output.stax.xml - результат работы StAX-парсера. 

-------------------------------------------------------

Задание сформулировано следующим образом.

1. Создать файл XML (input.xml) и соответствующую ему схему XSD (input.xsd).

2. При разработке XSD обязательно использовать: 
простые и составные типы, перечисления, шаблоны и предельные значения.

3. Создать Java-класс, соответствующий данному описанию.

4. Создать Java-приложение (назвать Main) для разбора XML-документа и 
инициализации контейнера объектов информацией из XML-файла. 
Для разбора использовать: SAX, StAX парсеры, а также DOM анализатор (все три варианта).

5. Определить методы, которые будут сортировать объекты контейнера 
с использованием интерфейса Comparator по некоторому параметру или набору параметров 
(три парсера => три варианта сортировки => три метода).

6. Произвести проверку XML-документа на валидность относительно XSD 
	(с помощью валидирующего парсера или validation API).

7. Определить метод сохранения информации из контейнера в XML-документ.

8. Продемонстрировать работу приложения:
a) каждым из парсеров прочитать XML-документ;
b) получить контейнер объектов;
c) отсортировать объекты в контейнере (одним из трех способов);
d) сохранить отсортированный контейнер в XML-документ (в файл).

9. Входными данными приложения являются имена двух файлов: 
XML-документа и XSD-документа; 
выходными данными - три XML файла. 
Имена входных файлов задавать параметрами командной строки 
(два параметра или один, если валидирование будет происходить относительно схемы, 
заданной внутри XML-документа).

10. Для демонстрации работы приложения создать класс Demo, 
который вызывает метод Main.main вашего приложения с соответствующим значением 
параметров командной строки:

Demo.java
-------------------------------------------------------
package ua.nure.your_last_name.practice7;
/**
 * Demo class to run project WO command line.
 */
class Demo {
    public static void main(String[] args) throws Exception {
        Main.main(new String[] { "input.xml" });
    }
}
-------------------------------------------------------

11. Классы верхнего уровня и нетривиальные методы должны быть документированы.

12. Опционально. Создать XSL документ преобразующий XML-документ в документ HTML.

_______________________

Соглашение об именованиях

Корневой элемент XML документа назвать согласно названию задачи или 
исходя из того что это контейнер однотипных элементов, имя которого указано в задаче.

Пример: если задача называется Тестирование, а элемент имеет имя Test,
то корневой элемент можно назвать либо Testing либо Tests.

Входные и выходные файлы должны иметь следующие имена.

Входные файлы:
-------------------------------------------------------
input.xml - XML-документ, валидный относительно input.xsd
input.xsd - XSD-докумен, схема для input.xml
-------------------------------------------------------

Выходные файлы (результат):
-------------------------------------------------------
output.dom.xml - результат работы DOM-анализатора и последующей сортировки одним из трех способов
output.sax.xml - результат работы SAX-парсера и последующей сортировки одним из трех способов
output.stax.xml - результат работы StAX-парсера после сортировки одним из трех способов
-------------------------------------------------------

Замечание.

1. input.xsd должен декларировать целевое пространство имен (атрибут targetNamespace должен присутствовать).

2. input.xml должен быть валидным относительно input.xsd

3. Выходные XML документы output.dom.xml, output.sax.xml и output.stax.xml должны быть валидны 
относительно исходной XML схемы input.xsd.
